/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type OrganizationType =
  | 'public'
  | 'private'
  | 'acquired'
  | 'nonprofit'
  | 'government'
  | 'academic';

export type SiteSettings = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  shortName: string;
  tagline: string;
  description: string;
  url: string;
  copyright: string;
  navigation: Array<{
    name: string;
    href: string;
    _type: 'inline';
    _key: string;
  }>;
  heroTitle: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  heroDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  featuredPages: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'page';
  }>;
};

export type Research = {
  _id: string;
  _type: 'research';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  organization: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  website: string;
  description: string;
};

export type ProductCategory = {
  _id: string;
  _type: 'productCategory';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  expansion?: string;
  marketSegment: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'marketSegment';
  };
  description: string;
  explanationHeading: string;
  explanation: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  similarCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productCategory';
  }>;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  longTitle?: string;
  slug: Slug;
  description: string;
  listType?:
    | 'cloudProvider'
    | 'framework'
    | 'marketSegment'
    | 'openSourceProject'
    | 'organization'
    | 'productCategory'
    | 'research';
  textContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  unlisted?: boolean;
  icon: IconPicker;
};

export type OpenSourceProject = {
  _id: string;
  _type: 'openSourceProject';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  organization?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  repository: string;
  description: string;
  mark?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productCategory';
  }>;
  supportedCloudProviders?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'cloudProvider';
  }>;
};

export type Organization = {
  _id: string;
  _type: 'organization';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description: string;
  organizationType: OrganizationType;
  stockSymbol?: string;
  parentOrganization?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  acquisitionDate?: string;
  acquisitionPrice?: number;
  pressRelease?: string;
  website?: string;
  linkedin?: string;
  crunchbase?: string;
  mark?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productCategory';
  }>;
  supportedCloudProviders?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'cloudProvider';
  }>;
};

export type MarketSegment = {
  _id: string;
  _type: 'marketSegment';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  icon: IconPicker;
};

export type Framework = {
  _id: string;
  _type: 'framework';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  website: string;
  description: string;
};

export type CloudProvider = {
  _id: string;
  _type: 'cloudProvider';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  abbreviation?: string;
  slug: Slug;
  description: string;
  website: string;
  linkedin?: string;
  sharedResponsibilityModel?: string;
  icon: IconPicker;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  nativeProducts?: Array<{
    name: string;
    description: string;
    link: string;
    _type: 'inline';
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type IconPicker = {
  _type: 'iconPicker';
  provider?: string;
  name?: string;
  svg?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | OrganizationType
  | SiteSettings
  | Research
  | ProductCategory
  | Page
  | OpenSourceProject
  | Organization
  | MarketSegment
  | Framework
  | CloudProvider
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | IconPicker;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries/cloudProvider.ts
// Variable: CLOUD_PROVIDER_SLUGS_QUERY
// Query: *[    _type == "cloudProvider" &&    defined(slug.current)  ].slug.current
export type CLOUD_PROVIDER_SLUGS_QUERYResult = Array<string>;
// Variable: CLOUD_PROVIDERS_QUERY
// Query: *[    _type == "cloudProvider"  ] | order(lower(name) asc) {      _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin,  }
export type CLOUD_PROVIDERS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  abbreviation: string | null;
  description: string;
  icon: string | null;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  website: string;
  linkedin: string | null;
}>;
// Variable: CLOUD_PROVIDER_QUERY
// Query: *[    _type == "cloudProvider" &&    slug.current == $slug  ][0] {    _createdAt,    "_updatedAt":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },  ],      _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin,    sharedResponsibilityModel,    nativeProducts[] {      name,      description,      link,    },    "vendors": *[      _type == "organization" &&      organizationType != "acquired" &&      ^._id in supportedCloudProviders[]._ref    ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,    },    "openSourceProjects": *[      _type == "openSourceProject" &&      ^._id in supportedCloudProviders[]._ref    ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,    },  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }
export type CLOUD_PROVIDER_QUERYResult = {
  _createdAt: string;
  _updatedAt: string | null;
  _id: string;
  slug: string;
  name: string;
  abbreviation: string | null;
  description: string;
  icon: string | null;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  website: string;
  linkedin: string | null;
  sharedResponsibilityModel: string | null;
  nativeProducts: Array<{
    name: string;
    description: string;
    link: string;
  }> | null;
  vendors: Array<{
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }>;
  openSourceProjects: Array<{
    _id: string;
    slug: string;
    name: string;
    description: string;
    repository: string;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/marketSegment.ts
// Variable: MARKET_SEGMENTS_QUERY
// Query: *[    _type == "marketSegment"  ] | order(lower(name) asc) {      _id,  "slug": slug.current,  name,  description,  "icon": icon.name,  }
export type MARKET_SEGMENTS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: null;
  icon: string | null;
}>;
// Variable: MARKET_SEGMENT_QUERY
// Query: *[    _type == "marketSegment" &&    slug.current == $slug  ][0] {        _id,  "slug": slug.current,  name,  description,  "icon": icon.name,  "productCategories": *[    _type == "productCategory" &&    marketSegment._ref == ^._id  ] | order(lower(name) asc) {    _id,    name,    "slug": slug.current,    expansion,  },  }
export type MARKET_SEGMENT_QUERYResult = {
  _id: string;
  slug: string;
  name: string;
  description: null;
  icon: string | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/openSourceProject.ts
// Variable: OPEN_SOURCE_PROJECTS_QUERY
// Query: *[    _type == "openSourceProject" &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || repository match $searchQuery + "*" || organization.name match $searchQuery + "*") &&    lower(name) > lower($prev)  ] | order(lower(name) asc) [0...20] {        _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },    organization -> {   _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo, },  }
export type OPEN_SOURCE_PROJECTS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  repository: string;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    slug: string;
    name: string;
    abbreviation: string | null;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
  organization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
}>;
// Variable: UNPAGINATED_OPEN_SOURCE_PROJECTS_QUERY
// Query: *[    _type == "openSourceProject" &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || repository match $searchQuery + "*" || organization.name match $searchQuery + "*")  ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },    organization -> {   _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo, },  }
export type UNPAGINATED_OPEN_SOURCE_PROJECTS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  repository: string;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    slug: string;
    name: string;
    abbreviation: string | null;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
  organization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
}>;
// Variable: OPEN_SOURCE_PROJECT_QUERY
// Query: *[    _type == "openSourceProject" &&    slug.current == $slug  ][0] {        _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },    organization -> {   _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo, },  }
export type OPEN_SOURCE_PROJECT_QUERYResult = {
  _id: string;
  slug: string;
  name: string;
  description: string;
  repository: string;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    slug: string;
    name: string;
    abbreviation: string | null;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
  organization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
} | null;

// Source: ./src/lib/sanity/queries/organization.ts
// Variable: ORGANIZATION_SLUGS_QUERY
// Query: *[    _type == "organization" &&    defined(slug.current) &&    organizationType != "acquired"  ].slug.current
export type ORGANIZATION_SLUGS_QUERYResult = Array<string>;
// Variable: ORGANIZATION_QUERY
// Query: *[    _type == "organization" &&    slug.current == $slug  ][0] {    _createdAt,    "_updatedAt":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "organization" && organizationType == "acquired" && parentOrganization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "productCategory" && _id in ^.productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "cloudProvider" && _id in ^.supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "research" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },  ],      ...select(    organizationType == "acquired" => {          _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,      parentOrganization -> {          _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,      },    },    organizationType != "acquired" => {          _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  ...(*[_type == "openSourceProject" && organization.ref == ^.id && name == ^.name] [0] {    ...select(      repository match "*github.com" => { "github": repository },      repository match "*gitlab.com" => { "gitlab": repository },    )  }),  "openSourceProjects": *[    _type == "openSourceProject" && organization._ref == ^._id && name != ^.name  ] {      _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,  },  "research": *[    _type == "research" && organization._ref == ^._id  ] {      _id,  "slug": slug.current,  name,  description,  website,  },  "acquiredEntities": *[    _type == "organization" && parentOrganization._ref == ^._id  ] | order(acquisitionDate desc) {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,  },    },  ),  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }
export type ORGANIZATION_QUERYResult =
  | {
      _createdAt: string;
      _updatedAt: string | null;
      _id: string;
      slug: string;
      name: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      productCategories: Array<{
        _id: string;
        slug: string;
        name: string;
        expansion: string | null;
        description: string;
        marketSegment: {
          _id: string;
          slug: string;
          name: string;
          description: null;
          icon: string | null;
        };
      }> | null;
      supportedCloudProviders: Array<{
        _id: string;
        slug: string;
        name: string;
        abbreviation: string | null;
        description: string;
        icon: string | null;
        mark: {
          asset: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        website: string;
        linkedin: string | null;
      }> | null;
      github: string;
      openSourceProjects: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        repository: string;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
      }>;
      research: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        website: string;
      }>;
      acquiredEntities: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
      }>;
    }
  | {
      _createdAt: string;
      _updatedAt: string | null;
      _id: string;
      slug: string;
      name: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      productCategories: Array<{
        _id: string;
        slug: string;
        name: string;
        expansion: string | null;
        description: string;
        marketSegment: {
          _id: string;
          slug: string;
          name: string;
          description: null;
          icon: string | null;
        };
      }> | null;
      supportedCloudProviders: Array<{
        _id: string;
        slug: string;
        name: string;
        abbreviation: string | null;
        description: string;
        icon: string | null;
        mark: {
          asset: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        website: string;
        linkedin: string | null;
      }> | null;
      gitlab: string;
      openSourceProjects: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        repository: string;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
      }>;
      research: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        website: string;
      }>;
      acquiredEntities: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
      }>;
    }
  | {
      _createdAt: string;
      _updatedAt: string | null;
      _id: string;
      slug: string;
      name: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      productCategories: Array<{
        _id: string;
        slug: string;
        name: string;
        expansion: string | null;
        description: string;
        marketSegment: {
          _id: string;
          slug: string;
          name: string;
          description: null;
          icon: string | null;
        };
      }> | null;
      supportedCloudProviders: Array<{
        _id: string;
        slug: string;
        name: string;
        abbreviation: string | null;
        description: string;
        icon: string | null;
        mark: {
          asset: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        website: string;
        linkedin: string | null;
      }> | null;
      openSourceProjects: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        repository: string;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
      }>;
      research: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        website: string;
      }>;
      acquiredEntities: Array<{
        _id: string;
        slug: string;
        name: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
      }>;
    }
  | {
      _createdAt: string;
      _updatedAt: string | null;
      _id: string;
      slug: string;
      name: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      acquisitionDate: string | null;
      acquisitionPrice: number | null;
      pressRelease: string | null;
      parentOrganization: {
        _id: string;
        slug: string;
        name: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
      } | null;
    }
  | null;
// Variable: VENDORS_COUNT_QUERY
// Query: count(    *[      _type == "organization" &&      organizationType != "acquired" &&      count(productCategories) > 0 &&      (count($productCategories) == 0 || references($productCategories)) &&      (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&      (count($supportedCloudProviders) == 0 || references($supportedCloudProviders))    ]  )
export type VENDORS_COUNT_QUERYResult = number;
// Variable: VENDORS_QUERY
// Query: *[    _type == "organization" &&    organizationType != "acquired" &&    count(productCategories) > 0 &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || website match $searchQuery + "*") &&    lower(name) > lower($prev)  ] | order(lower(name) asc) [0...20] {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  }
export type VENDORS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    slug: string;
    name: string;
    abbreviation: string | null;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
}>;
// Variable: UNPAGINATED_VENDORS_QUERY
// Query: *[    _type == "organization" &&    organizationType != "acquired" &&    count(productCategories) > 0 &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || website match $searchQuery + "*")  ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  "slug": slug.current,  name,  abbreviation,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  }
export type UNPAGINATED_VENDORS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    slug: string;
    name: string;
    abbreviation: string | null;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
}>;
// Variable: ACQUISITIONS_QUERY
// Query: *[    _type == "organization" &&    organizationType == "acquired" &&    (      ($prevDate == "" && $prevId == "") ||      acquisitionDate < $prevDate ||      (acquisitionDate == $prevDate && _id > $prevId)    )  ] | order(acquisitionDate desc) [0...20] {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,    parentOrganization -> {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,    },  }
export type ACQUISITIONS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  acquisitionDate: string | null;
  acquisitionPrice: number | null;
  pressRelease: string | null;
  parentOrganization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
}>;
// Variable: UNPAGINATED_ACQUISITIONS_QUERY
// Query: *[    _type == "organization" &&    organizationType == "acquired"  ] | order(acquisitionDate desc) {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,    parentOrganization -> {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,    },  }
export type UNPAGINATED_ACQUISITIONS_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  acquisitionDate: string | null;
  acquisitionPrice: number | null;
  pressRelease: string | null;
  parentOrganization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
}>;

// Source: ./src/lib/sanity/queries/page.ts
// Variable: PAGE_SLUGS_QUERY
// Query: *[  _type == "page" &&  defined(slug.current) &&  !defined(listType) &&  defined(textContent) &&  (!defined(unlisted) || unlisted == false)].slug.current
export type PAGE_SLUGS_QUERYResult = Array<string>;
// Variable: PAGE_QUERY
// Query: *[    _type == "page" &&    slug.current == $slug  ][0] {    _createdAt,    "_updatedAt":   [    { "timestamp": _updatedAt },    select(defined(listType) => { "timestamp": *[_type == ^.listType] | order(_updatedAt desc) [0]._updatedAt }),  ],      "slug": slug.current,  title,  description,  "icon": icon.name,  ...select(!defined(listType) => { longTitle, textContent[] }),  unlisted,  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }
export type PAGE_QUERYResult = {
  _createdAt: string;
  _updatedAt: string | null;
  slug: string;
  title: string;
  description: string;
  icon: string | null;
  longTitle: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
  unlisted: boolean | null;
} | null;

// Source: ./src/lib/sanity/queries/productCategory.ts
// Variable: PRODUCT_CATEGORY_SLUGS_QUERY
// Query: *[    _type == "productCategory" &&    defined(slug.current)  ].slug.current
export type PRODUCT_CATEGORY_SLUGS_QUERYResult = Array<string>;
// Variable: PRODUCT_CATEGORIES_QUERY
// Query: *[    _type == "productCategory" &&    ($marketSegment == "" || $marketSegment == marketSegment._ref) &&    (length($referenceType) == 0 || count(*[_type == $referenceType && references(^._id)]) > 0)  ] | order(lower(name) asc) {      _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, },  }
export type PRODUCT_CATEGORIES_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  expansion: string | null;
  description: string;
  marketSegment: {
    _id: string;
    slug: string;
    name: string;
    description: null;
    icon: string | null;
  };
}>;
// Variable: PRODUCT_CATEGORY_QUERY
// Query: *[    _type == "productCategory" &&    slug.current == $slug  ][0] {    _createdAt,    "_updatedAt":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "marketSegment" && _id == ^.marketSegment._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "productCategory" && _id in ^.similarCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },  ],      _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, },    explanationHeading,    explanation[],    "vendors": *[      _type == "organization" &&      organizationType != "acquired" &&      ^._id in productCategories[]._ref    ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,    },    "openSourceProjects": *[      _type == "openSourceProject" &&      ^._id in productCategories[]._ref    ] | order(lower(name) asc) {        _id,  "slug": slug.current,  name,  description,  repository,  mark,  logo,    },    similarCategories[] -> {   _id,  "slug": slug.current,  name,  expansion,  description,  marketSegment -> {   _id,  "slug": slug.current,  name,  description,  "icon": icon.name, }, },  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }
export type PRODUCT_CATEGORY_QUERYResult = {
  _createdAt: string;
  _updatedAt: string | null;
  _id: string;
  slug: string;
  name: string;
  expansion: string | null;
  description: string;
  marketSegment: {
    _id: string;
    slug: string;
    name: string;
    description: null;
    icon: string | null;
  };
  explanationHeading: string;
  explanation: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  vendors: Array<{
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }>;
  openSourceProjects: Array<{
    _id: string;
    slug: string;
    name: string;
    description: string;
    repository: string;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }>;
  similarCategories: Array<{
    _id: string;
    slug: string;
    name: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      slug: string;
      name: string;
      description: null;
      icon: string | null;
    };
  }> | null;
} | null;

// Source: ./src/lib/sanity/queries/research.ts
// Variable: RESEARCHES_QUERY
// Query: *[    _type == "research"  ] | order(lower(name) asc) {      _id,  "slug": slug.current,  name,  description,  website,    organization -> {   _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo, },  }
export type RESEARCHES_QUERYResult = Array<{
  _id: string;
  slug: string;
  name: string;
  description: string;
  website: string;
  organization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  };
}>;
// Variable: RESEARCH_QUERY
// Query: *[    _type == "research" &&    slug.current == $slug  ][0] {      _id,  "slug": slug.current,  name,  description,  website,    organization -> {   _id,  "slug": slug.current,  name,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo, },  }
export type RESEARCH_QUERYResult = {
  _id: string;
  slug: string;
  name: string;
  description: string;
  website: string;
  organization: {
    _id: string;
    slug: string;
    name: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  };
} | null;

// Source: ./src/lib/sanity/queries/siteSettings.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[    _type == "siteSettings" &&    _id == "siteSettings"  ][0] {    name,    shortName,    tagline,    description,    url,    copyright,    navigation[] {      name,      href,    },    heroTitle[0],    heroDescription[],    featuredPages[] -> {        "slug": slug.current,  title,  description,  "icon": icon.name,  ...select(!defined(listType) => { longTitle, textContent[] }),  unlisted,    }  }
export type SITE_SETTINGS_QUERYResult = {
  name: string;
  shortName: string;
  tagline: string;
  description: string;
  url: string;
  copyright: string;
  navigation: Array<{
    name: string;
    href: string;
  }>;
  heroTitle: {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  } | null;
  heroDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  featuredPages: Array<{
    slug: string;
    title: string;
    description: string;
    icon: string | null;
    longTitle: string | null;
    textContent: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    unlisted: boolean | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/sitemap.ts
// Variable: SITEMAP_QUERY
// Query: *[ _type == "siteSettings" && _id == "siteSettings" ][0] {    "items":      [{ url, "lastModified": _updatedAt }] +      (*[_type == "page" && defined(slug.current) && (!defined(unlisted) || unlisted == false)] | order(slug.current asc) {        "url": ^.url + "/" + slug.current,        "lastModified":   [    { "timestamp": _updatedAt },    select(defined(listType) => { "timestamp": *[_type == ^.listType] | order(_updatedAt desc) [0]._updatedAt }),  ],      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +      (*[_type == "productCategory" && defined(slug.current)] | order(slug.current asc) {        "url": ^.url + "/category/" + slug.current,        "lastModified":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "marketSegment" && _id == ^.marketSegment._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "productCategory" && _id in ^.similarCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },  ],      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +      (*[_type == "organization" && defined(slug.current) && organizationType != "acquired"] | order(slug.current asc) {        "url": ^.url + "/organization/" + slug.current,        "lastModified":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "organization" && organizationType == "acquired" && parentOrganization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "productCategory" && _id in ^.productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "cloudProvider" && _id in ^.supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "research" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },  ],      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +      (*[_type == "cloudProvider" && defined(slug.current)] | order(slug.current asc) {        "url": ^.url + "/provider/" + slug.current,        "lastModified":   [    { "timestamp": _updatedAt },    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },    { "timestamp": *[_type == "openSourceProject" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },  ],      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp })  }.items
export type SITEMAP_QUERYResult = Array<
  | {
      url: string;
      lastModified: string;
    }
  | {
      url: string;
      lastModified: string | null;
    }
> | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[\n    _type == "cloudProvider" &&\n    defined(slug.current)\n  ].slug.current\n': CLOUD_PROVIDER_SLUGS_QUERYResult;
    '\n  *[\n    _type == "cloudProvider"\n  ] | order(lower(name) asc) {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n\n  }\n': CLOUD_PROVIDERS_QUERYResult;
    '\n  *[\n    _type == "cloudProvider" &&\n    slug.current == $slug\n  ][0] {\n    _createdAt,\n    "_updatedAt": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n    \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n\n    sharedResponsibilityModel,\n    nativeProducts[] {\n      name,\n      description,\n      link,\n    },\n    "vendors": *[\n      _type == "organization" &&\n      organizationType != "acquired" &&\n      ^._id in supportedCloudProviders[]._ref\n    ] | order(lower(name) asc) {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n    },\n    "openSourceProjects": *[\n      _type == "openSourceProject" &&\n      ^._id in supportedCloudProviders[]._ref\n    ] | order(lower(name) asc) {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n    },\n  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }\n': CLOUD_PROVIDER_QUERYResult;
    '\n  *[\n    _type == "marketSegment"\n  ] | order(lower(name) asc) {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n\n  }\n': MARKET_SEGMENTS_QUERYResult;
    '\n  *[\n    _type == "marketSegment" &&\n    slug.current == $slug\n  ][0] {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n\n  "productCategories": *[\n    _type == "productCategory" &&\n    marketSegment._ref == ^._id\n  ] | order(lower(name) asc) {\n    _id,\n    name,\n    "slug": slug.current,\n    expansion,\n  },\n\n  }\n': MARKET_SEGMENT_QUERYResult;
    '\n  *[\n    _type == "openSourceProject" &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&\n    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || repository match $searchQuery + "*" || organization.name match $searchQuery + "*") &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) [0...20] {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n    organization -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n },\n  }\n': OPEN_SOURCE_PROJECTS_QUERYResult;
    '\n  *[\n    _type == "openSourceProject" &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&\n    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || repository match $searchQuery + "*" || organization.name match $searchQuery + "*")\n  ] | order(lower(name) asc) {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n    organization -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n },\n  }\n': UNPAGINATED_OPEN_SOURCE_PROJECTS_QUERYResult;
    '\n  *[\n    _type == "openSourceProject" &&\n    slug.current == $slug\n  ][0] {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n    organization -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n },\n  }\n': OPEN_SOURCE_PROJECT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    defined(slug.current) &&\n    organizationType != "acquired"\n  ].slug.current\n': ORGANIZATION_SLUGS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    slug.current == $slug\n  ][0] {\n    _createdAt,\n    "_updatedAt": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType == "acquired" && parentOrganization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "productCategory" && _id in ^.productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "cloudProvider" && _id in ^.supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "research" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n    \n  ...select(\n    organizationType == "acquired" => {\n      \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n      parentOrganization -> {\n        \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n      },\n    },\n    organizationType != "acquired" => {\n      \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n  ...(*[_type == "openSourceProject" && organization.ref == ^.id && name == ^.name] [0] {\n    ...select(\n      repository match "*github.com" => { "github": repository },\n      repository match "*gitlab.com" => { "gitlab": repository },\n    )\n  }),\n  "openSourceProjects": *[\n    _type == "openSourceProject" && organization._ref == ^._id && name != ^.name\n  ] {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n  },\n  "research": *[\n    _type == "research" && organization._ref == ^._id\n  ] {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  website,\n\n  },\n  "acquiredEntities": *[\n    _type == "organization" && parentOrganization._ref == ^._id\n  ] | order(acquisitionDate desc) {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n  },\n\n    },\n  ),\n\n  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }\n': ORGANIZATION_QUERYResult;
    '\n  count(\n    *[\n      _type == "organization" &&\n      organizationType != "acquired" &&\n      count(productCategories) > 0 &&\n      (count($productCategories) == 0 || references($productCategories)) &&\n      (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n      (count($supportedCloudProviders) == 0 || references($supportedCloudProviders))\n    ]\n  )\n': VENDORS_COUNT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType != "acquired" &&\n    count(productCategories) > 0 &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&\n    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || website match $searchQuery + "*") &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) [0...20] {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n  }\n': VENDORS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType != "acquired" &&\n    count(productCategories) > 0 &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n    (count($supportedCloudProviders) == 0 || references($supportedCloudProviders)) &&\n    (length($searchQuery) == 0 || name match $searchQuery + "*" || description match $searchQuery + "*" || website match $searchQuery + "*")\n  ] | order(lower(name) asc) {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  abbreviation,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n  }\n': UNPAGINATED_VENDORS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType == "acquired" &&\n    (\n      ($prevDate == "" && $prevId == "") ||\n      acquisitionDate < $prevDate ||\n      (acquisitionDate == $prevDate && _id > $prevId)\n    )\n  ] | order(acquisitionDate desc) [0...20] {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n    parentOrganization -> {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n    },\n  }\n': ACQUISITIONS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType == "acquired"\n  ] | order(acquisitionDate desc) {\n    \n  \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n    parentOrganization -> {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n    },\n  }\n': UNPAGINATED_ACQUISITIONS_QUERYResult;
    '\n*[\n  _type == "page" &&\n  defined(slug.current) &&\n  !defined(listType) &&\n  defined(textContent) &&\n  (!defined(unlisted) || unlisted == false)\n].slug.current\n': PAGE_SLUGS_QUERYResult;
    '\n  *[\n    _type == "page" &&\n    slug.current == $slug\n  ][0] {\n    _createdAt,\n    "_updatedAt": \n  [\n    { "timestamp": _updatedAt },\n    select(defined(listType) => { "timestamp": *[_type == ^.listType] | order(_updatedAt desc) [0]._updatedAt }),\n  ]\n,\n    \n  "slug": slug.current,\n  title,\n  description,\n  "icon": icon.name,\n  ...select(!defined(listType) => { longTitle, textContent[] }),\n  unlisted,\n\n  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }\n': PAGE_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    defined(slug.current)\n  ].slug.current\n': PRODUCT_CATEGORY_SLUGS_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    ($marketSegment == "" || $marketSegment == marketSegment._ref) &&\n    (length($referenceType) == 0 || count(*[_type == $referenceType && references(^._id)]) > 0)\n  ] | order(lower(name) asc) {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n\n  }\n': PRODUCT_CATEGORIES_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    slug.current == $slug\n  ][0] {\n    _createdAt,\n    "_updatedAt": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "marketSegment" && _id == ^.marketSegment._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "productCategory" && _id in ^.similarCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n    \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n\n    explanationHeading,\n    explanation[],\n    "vendors": *[\n      _type == "organization" &&\n      organizationType != "acquired" &&\n      ^._id in productCategories[]._ref\n    ] | order(lower(name) asc) {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n    },\n    "openSourceProjects": *[\n      _type == "openSourceProject" &&\n      ^._id in productCategories[]._ref\n    ] | order(lower(name) asc) {\n      \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  repository,\n  mark,\n  logo,\n\n    },\n    similarCategories[] -> { \n  _id,\n  "slug": slug.current,\n  name,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  "icon": icon.name,\n },\n },\n  } { ..., "_updatedAt": _updatedAt | order(coalesce(timestamp, "") desc) [0].timestamp }\n': PRODUCT_CATEGORY_QUERYResult;
    '\n  *[\n    _type == "research"\n  ] | order(lower(name) asc) {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  website,\n\n    organization -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n },\n  }\n': RESEARCHES_QUERYResult;
    '\n  *[\n    _type == "research" &&\n    slug.current == $slug\n  ][0] {\n    \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  website,\n\n    organization -> { \n  _id,\n  "slug": slug.current,\n  name,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n },\n  }\n': RESEARCH_QUERYResult;
    '\n  *[\n    _type == "siteSettings" &&\n    _id == "siteSettings"\n  ][0] {\n    name,\n    shortName,\n    tagline,\n    description,\n    url,\n    copyright,\n    navigation[] {\n      name,\n      href,\n    },\n    heroTitle[0],\n    heroDescription[],\n    featuredPages[] -> {\n      \n  "slug": slug.current,\n  title,\n  description,\n  "icon": icon.name,\n  ...select(!defined(listType) => { longTitle, textContent[] }),\n  unlisted,\n\n    }\n  }\n': SITE_SETTINGS_QUERYResult;
    '\n  *[ _type == "siteSettings" && _id == "siteSettings" ][0] {\n    "items":\n      [{ url, "lastModified": _updatedAt }] +\n      (*[_type == "page" && defined(slug.current) && (!defined(unlisted) || unlisted == false)] | order(slug.current asc) {\n        "url": ^.url + "/" + slug.current,\n        "lastModified": \n  [\n    { "timestamp": _updatedAt },\n    select(defined(listType) => { "timestamp": *[_type == ^.listType] | order(_updatedAt desc) [0]._updatedAt }),\n  ]\n,\n      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +\n      (*[_type == "productCategory" && defined(slug.current)] | order(slug.current asc) {\n        "url": ^.url + "/category/" + slug.current,\n        "lastModified": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "marketSegment" && _id == ^.marketSegment._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && ^._id in productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "productCategory" && _id in ^.similarCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +\n      (*[_type == "organization" && defined(slug.current) && organizationType != "acquired"] | order(slug.current asc) {\n        "url": ^.url + "/organization/" + slug.current,\n        "lastModified": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType == "acquired" && parentOrganization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "productCategory" && _id in ^.productCategories[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "cloudProvider" && _id in ^.supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "research" && organization._ref == ^._id] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp }) +\n      (*[_type == "cloudProvider" && defined(slug.current)] | order(slug.current asc) {\n        "url": ^.url + "/provider/" + slug.current,\n        "lastModified": \n  [\n    { "timestamp": _updatedAt },\n    { "timestamp": *[_type == "organization" && organizationType != "acquired" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n    { "timestamp": *[_type == "openSourceProject" && ^._id in supportedCloudProviders[]._ref] | order(_updatedAt desc) [0]._updatedAt },\n  ]\n,\n      } { url, "lastModified": lastModified | order(coalesce(timestamp, "") desc) [0].timestamp })\n  }.items\n': SITEMAP_QUERYResult;
  }
}
