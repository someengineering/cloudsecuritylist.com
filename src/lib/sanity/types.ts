/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type OrganizationType =
  | 'public'
  | 'private'
  | 'nonprofit'
  | 'government'
  | 'academic'
  | 'open-source'
  | 'subsidiary';

export type Research = {
  _id: string;
  _type: 'research';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  organization?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  website: string;
  description?: string;
};

export type ProductCategory = {
  _id: string;
  _type: 'productCategory';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  expansion?: string;
  marketSegment: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'marketSegment';
  };
  description: string;
};

export type Organization = {
  _id: string;
  _type: 'organization';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  organizationType: OrganizationType;
  stockSymbol?: string;
  productCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productCategory';
  }>;
  icon: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  website: string;
  linkedin?: string;
  crunchbase?: string;
  description: string;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MarketSegment = {
  _id: string;
  _type: 'marketSegment';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description?: string;
};

export type Framework = {
  _id: string;
  _type: 'framework';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  website: string;
  description: string;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | OrganizationType
  | Research
  | ProductCategory
  | Organization
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | MarketSegment
  | Framework
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries/marketSegments.ts
// Variable: MARKET_SEGMENTS_QUERY
// Query: *[    _type == "marketSegment" &&    defined(slug.current) &&    count(      *[        _type == "productCategory" &&        marketSegment._ref == ^._id &&         count(*[_type == "organization" && references(^._id)]) > 0      ]    ) > 0  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  description,    "productCategories": *[_type == "productCategory" && marketSegment._ref == ^._id && count(*[_type == "organization" && references(^._id)]) > 0] {      _id,      name,      "slug": slug.current,      expansion,    }  }
export type MARKET_SEGMENTS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: string | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
  }>;
}>;
// Variable: MARKET_SEGMENT_QUERY
// Query: *[    _type == "marketSegment" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  description,    "productCategories": *[_type == "productCategory" && marketSegment._ref == ^._id && count(*[_type == "organization" && references(^._id)]) > 0] {      _id,      name,      "slug": slug.current,      expansion,    }  }
export type MARKET_SEGMENT_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  description: string | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/organizations.ts
// Variable: ORGANIZATIONS_QUERY
// Query: *[    _type == "organization" &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes)  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description,  }
export type ORGANIZATIONS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  organizationType: OrganizationType;
  stockSymbol: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  icon: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
    marketSegment: {
      _id: string;
      name: string;
      slug: string;
      description: string | null;
    };
    description: string;
  }> | null;
  research: Array<{
    _id: string;
    name: string;
    slug: string;
    website: string;
    description: string | null;
  }>;
  website: string;
  linkedin: string | null;
  crunchbase: string | null;
  description: string;
}>;
// Variable: ORGANIZATION_QUERY
// Query: *[    _type == "organization" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description,  }
export type ORGANIZATION_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  organizationType: OrganizationType;
  stockSymbol: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  icon: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
    marketSegment: {
      _id: string;
      name: string;
      slug: string;
      description: string | null;
    };
    description: string;
  }> | null;
  research: Array<{
    _id: string;
    name: string;
    slug: string;
    website: string;
    description: string | null;
  }>;
  website: string;
  linkedin: string | null;
  crunchbase: string | null;
  description: string;
} | null;
// Variable: VENDORS_COUNT_QUERY
// Query: count(    *[      _type == "organization" &&      count(productCategories) > 0 &&      (count($productCategories) == 0 || references($productCategories)) &&      (count($organizationTypes) == 0 || organizationType in $organizationTypes)    ]  )
export type VENDORS_COUNT_QUERYResult = number;
// Variable: VENDORS_QUERY
// Query: *[    _type == "organization" &&    count(productCategories) > 0 &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&    lower(name) > lower($prev)  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description,  }
export type VENDORS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  organizationType: OrganizationType;
  stockSymbol: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  icon: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
    marketSegment: {
      _id: string;
      name: string;
      slug: string;
      description: string | null;
    };
    description: string;
  }> | null;
  research: Array<{
    _id: string;
    name: string;
    slug: string;
    website: string;
    description: string | null;
  }>;
  website: string;
  linkedin: string | null;
  crunchbase: string | null;
  description: string;
}>;
// Variable: VENDOR_QUERY
// Query: *[    _type == "organization" &&    slug.current == $slug &&    count(productCategories) > 0  ] [0] {      _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description,  }
export type VENDOR_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  organizationType: OrganizationType;
  stockSymbol: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  icon: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
    marketSegment: {
      _id: string;
      name: string;
      slug: string;
      description: string | null;
    };
    description: string;
  }> | null;
  research: Array<{
    _id: string;
    name: string;
    slug: string;
    website: string;
    description: string | null;
  }>;
  website: string;
  linkedin: string | null;
  crunchbase: string | null;
  description: string;
} | null;

// Source: ./src/lib/sanity/queries/productCategories.ts
// Variable: PRODUCT_CATEGORIES_QUERY
// Query: *[    _type == "productCategory" &&    count(*[_type == "organization" && references(^._id)]) > 0  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description,  }
export type PRODUCT_CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  expansion: string | null;
  marketSegment: {
    _id: string;
    name: string;
    slug: string;
    description: string | null;
  };
  description: string;
}>;
// Variable: PRODUCT_CATEGORIES_BY_MARKET_SEGMENT_QUERY
// Query: *[    _type == "productCategory" &&    count(*[_type == "organization" && references(^._id)]) > 0 &&    references($marketSegment)  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description,  }
export type PRODUCT_CATEGORIES_BY_MARKET_SEGMENT_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  expansion: string | null;
  marketSegment: {
    _id: string;
    name: string;
    slug: string;
    description: string | null;
  };
  description: string;
}>;
// Variable: PRODUCT_CATEGORY_QUERY
// Query: *[    _type == "productCategory" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description,  }
export type PRODUCT_CATEGORY_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  expansion: string | null;
  marketSegment: {
    _id: string;
    name: string;
    slug: string;
    description: string | null;
  };
  description: string;
} | null;

// Source: ./src/lib/sanity/queries/research.ts
// Variable: RESEARCHES_QUERY
// Query: *[    _type == "research" &&    (!defined($productCategories) || count($productCategories) == 0 || references($productCategories))  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  website,  description,    organization -> {   _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description, },  }
export type RESEARCHES_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  website: string;
  description: string | null;
  organization: {
    _id: string;
    name: string;
    slug: string;
    organizationType: OrganizationType;
    stockSymbol: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    icon: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    productCategories: Array<{
      _id: string;
      name: string;
      slug: string;
      expansion: string | null;
      marketSegment: {
        _id: string;
        name: string;
        slug: string;
        description: string | null;
      };
      description: string;
    }> | null;
    research: Array<{
      _id: string;
      name: string;
      slug: string;
      website: string;
      description: string | null;
    }>;
    website: string;
    linkedin: string | null;
    crunchbase: string | null;
    description: string;
  } | null;
}>;
// Variable: RESEARCH_QUERY
// Query: *[    _type == "research" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  website,  description,    organization -> {   _id,  name,  "slug": slug.current,  organizationType,  stockSymbol,  logo,  icon,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  marketSegment -> {   _id,  name,  "slug": slug.current,  description, },  description, },  "research": *[_type == "research" && organization._ref == ^._id] {      _id,  name,  "slug": slug.current,  website,  description,  },  website,  linkedin,  crunchbase,  description, },  }
export type RESEARCH_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  website: string;
  description: string | null;
  organization: {
    _id: string;
    name: string;
    slug: string;
    organizationType: OrganizationType;
    stockSymbol: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    icon: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    productCategories: Array<{
      _id: string;
      name: string;
      slug: string;
      expansion: string | null;
      marketSegment: {
        _id: string;
        name: string;
        slug: string;
        description: string | null;
      };
      description: string;
    }> | null;
    research: Array<{
      _id: string;
      name: string;
      slug: string;
      website: string;
      description: string | null;
    }>;
    website: string;
    linkedin: string | null;
    crunchbase: string | null;
    description: string;
  } | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[\n    _type == "marketSegment" &&\n    defined(slug.current) &&\n    count(\n      *[\n        _type == "productCategory" &&\n        marketSegment._ref == ^._id && \n        count(*[_type == "organization" && references(^._id)]) > 0\n      ]\n    ) > 0\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n\n    "productCategories": *[_type == "productCategory" && marketSegment._ref == ^._id && count(*[_type == "organization" && references(^._id)]) > 0] {\n      _id,\n      name,\n      "slug": slug.current,\n      expansion,\n    }\n  }\n': MARKET_SEGMENTS_QUERYResult;
    '\n  *[\n    _type == "marketSegment" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n\n    "productCategories": *[_type == "productCategory" && marketSegment._ref == ^._id && count(*[_type == "organization" && references(^._id)]) > 0] {\n      _id,\n      name,\n      "slug": slug.current,\n      expansion,\n    }\n  }\n': MARKET_SEGMENT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes)\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n\n  }\n': ORGANIZATIONS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n\n  }\n': ORGANIZATION_QUERYResult;
    '\n  count(\n    *[\n      _type == "organization" &&\n      count(productCategories) > 0 &&\n      (count($productCategories) == 0 || references($productCategories)) &&\n      (count($organizationTypes) == 0 || organizationType in $organizationTypes)\n    ]\n  )\n': VENDORS_COUNT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    count(productCategories) > 0 &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n\n  }\n': VENDORS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    slug.current == $slug &&\n    count(productCategories) > 0\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n\n  }\n': VENDOR_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    count(*[_type == "organization" && references(^._id)]) > 0\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n\n  }\n': PRODUCT_CATEGORIES_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    count(*[_type == "organization" && references(^._id)]) > 0 &&\n    references($marketSegment)\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n\n  }\n': PRODUCT_CATEGORIES_BY_MARKET_SEGMENT_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n\n  }\n': PRODUCT_CATEGORY_QUERYResult;
    '\n  *[\n    _type == "research" &&\n    (!defined($productCategories) || count($productCategories) == 0 || references($productCategories))\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n    organization -> { \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n },\n  }\n': RESEARCHES_QUERYResult;
    '\n  *[\n    _type == "research" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n    organization -> { \n  _id,\n  name,\n  "slug": slug.current,\n  organizationType,\n  stockSymbol,\n  logo,\n  icon,\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n },\n  description,\n },\n  "research": *[_type == "research" && organization._ref == ^._id] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  website,\n  description,\n\n  },\n  website,\n  linkedin,\n  crunchbase,\n  description,\n },\n  }\n': RESEARCH_QUERYResult;
  }
}
