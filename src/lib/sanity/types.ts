/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type OrganizationType =
  | 'public'
  | 'private'
  | 'acquired'
  | 'nonprofit'
  | 'government'
  | 'academic';

export type SiteSettings = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  url: string;
  copyright: string;
  navigation: Array<{
    name: string;
    href: string;
    _type: 'inline';
    _key: string;
  }>;
};

export type Research = {
  _id: string;
  _type: 'research';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  organization?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  website: string;
  description?: string;
};

export type ProductCategory = {
  _id: string;
  _type: 'productCategory';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  expansion?: string;
  marketSegment: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'marketSegment';
  };
  description: string;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description: string;
};

export type Organization = {
  _id: string;
  _type: 'organization';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description: string;
  organizationType: OrganizationType;
  stockSymbol?: string;
  parentOrganization?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organization';
  };
  acquisitionDate?: string;
  acquisitionPrice?: number;
  pressRelease?: string;
  website?: string;
  linkedin?: string;
  crunchbase?: string;
  mark?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productCategory';
  }>;
  supportedCloudProviders?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'cloudProvider';
  }>;
};

export type MarketSegment = {
  _id: string;
  _type: 'marketSegment';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  icon: IconPicker;
};

export type Framework = {
  _id: string;
  _type: 'framework';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  website: string;
  description?: string;
};

export type CloudProvider = {
  _id: string;
  _type: 'cloudProvider';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description: string;
  website: string;
  linkedin?: string;
  icon: IconPicker;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type IconPicker = {
  _type: 'iconPicker';
  provider?: string;
  name?: string;
  svg?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | OrganizationType
  | SiteSettings
  | Research
  | ProductCategory
  | Page
  | Organization
  | MarketSegment
  | Framework
  | CloudProvider
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | IconPicker;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries/cloudProvider.ts
// Variable: CLOUD_PROVIDER_SLUGS_QUERY
// Query: *[    _type == "cloudProvider" &&    defined(slug.current)  ].slug.current
export type CLOUD_PROVIDER_SLUGS_QUERYResult = Array<string>;
// Variable: CLOUD_PROVIDERS_QUERY
// Query: *[    _type == "cloudProvider" &&    lower(name) > lower($prev)  ] | order(lower(name) asc) {      _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin,  }
export type CLOUD_PROVIDERS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: string;
  icon: string | null;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  website: string;
  linkedin: string | null;
}>;
// Variable: CLOUD_PROVIDER_QUERY
// Query: *[    _type == "cloudProvider" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin,    "vendors": *[      _type == "organization" && ^._id in supportedCloudProviders[]._ref    ] | order(lower(name) asc) {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },    }  }
export type CLOUD_PROVIDER_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  description: string;
  icon: string | null;
  mark: {
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  website: string;
  linkedin: string | null;
  vendors: Array<{
    _id: string;
    name: string;
    slug: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    productCategories: Array<{
      _id: string;
      name: string;
      slug: string;
      expansion: string | null;
      description: string;
      marketSegment: {
        _id: string;
        name: string;
        slug: string;
        description: null;
        icon: string | null;
      };
    }> | null;
    supportedCloudProviders: Array<{
      _id: string;
      name: string;
      slug: string;
      description: string;
      icon: string | null;
      mark: {
        asset: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      website: string;
      linkedin: string | null;
    }> | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/marketSegments.ts
// Variable: MARKET_SEGMENTS_QUERY
// Query: *[    _type == "marketSegment"  ] | order(lower(name) asc) {        _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  "productCategories": *[    _type == "productCategory" &&    marketSegment._ref == ^._id &&    count(*[_type == "organization" && ^._id in productCategories[]._ref]) > 0  ] | order(lower(name) asc) {    _id,    name,    "slug": slug.current,    expansion,  },  }
export type MARKET_SEGMENTS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: null;
  icon: string | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
  }>;
}>;
// Variable: MARKET_SEGMENT_QUERY
// Query: *[    _type == "marketSegment" &&    slug.current == $slug  ] [0] {        _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  "productCategories": *[    _type == "productCategory" &&    marketSegment._ref == ^._id &&    count(*[_type == "organization" && ^._id in productCategories[]._ref]) > 0  ] | order(lower(name) asc) {    _id,    name,    "slug": slug.current,    expansion,  },  }
export type MARKET_SEGMENT_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  description: null;
  icon: string | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/organizations.ts
// Variable: ORGANIZATIONS_COUNT_QUERY
// Query: count(    *[      _type == "organization" &&      organizationType != "acquired" &&      (count($organizationTypes) == 0 || organizationType in $organizationTypes)    ]  )
export type ORGANIZATIONS_COUNT_QUERYResult = number;
// Variable: ORGANIZATION_SLUGS_QUERY
// Query: *[    _type == "organization" &&    defined(slug.current) &&    organizationType != "acquired"  ].slug.current
export type ORGANIZATION_SLUGS_QUERYResult = Array<string>;
// Variable: ORGANIZATIONS_QUERY
// Query: *[    _type == "organization" &&    organizationType != "acquired" &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&    lower(name) > lower($prev)  ] | order(lower(name) asc) [0...20] {      _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  }
export type ORGANIZATIONS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
}>;
// Variable: ORGANIZATION_QUERY
// Query: *[    _type == "organization" &&    slug.current == $slug  ] [0] {      ...select(    organizationType == "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,      parentOrganization -> {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,      },    },    organizationType != "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  "research": *[    _type == "research" && organization._ref == ^._id  ] {      _id,  name,  "slug": slug.current,  description,  website,  },  "acquiredEntities": *[    _type == "organization" && parentOrganization._ref == ^._id  ] {        _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,  },    },  ),  }
export type ORGANIZATION_QUERYResult =
  | {
      _id: string;
      name: string;
      slug: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      productCategories: Array<{
        _id: string;
        name: string;
        slug: string;
        expansion: string | null;
        description: string;
        marketSegment: {
          _id: string;
          name: string;
          slug: string;
          description: null;
          icon: string | null;
        };
      }> | null;
      supportedCloudProviders: Array<{
        _id: string;
        name: string;
        slug: string;
        description: string;
        icon: string | null;
        mark: {
          asset: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        website: string;
        linkedin: string | null;
      }> | null;
      research: Array<{
        _id: string;
        name: string;
        slug: string;
        description: string | null;
        website: string;
      }>;
      acquiredEntities: Array<{
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
      }>;
    }
  | {
      _id: string;
      name: string;
      slug: string;
      description: string;
      organizationType: OrganizationType;
      website: string | null;
      linkedin: string | null;
      crunchbase: string | null;
      stockSymbol: string | null;
      mark: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      acquisitionDate: string | null;
      acquisitionPrice: number | null;
      pressRelease: string | null;
      parentOrganization: {
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
      } | null;
    }
  | null;
// Variable: VENDORS_COUNT_QUERY
// Query: count(    *[      _type == "organization" &&      organizationType != "acquired" &&      count(productCategories) > 0 &&      (count($productCategories) == 0 || references($productCategories)) &&      (count($organizationTypes) == 0 || organizationType in $organizationTypes)    ]  )
export type VENDORS_COUNT_QUERYResult = number;
// Variable: VENDORS_QUERY
// Query: *[    _type == "organization" &&    organizationType != "acquired" &&    count(productCategories) > 0 &&    (count($productCategories) == 0 || references($productCategories)) &&    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&    lower(name) > lower($prev)  ] | order(lower(name) asc) [0...20] {        _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  }
export type VENDORS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: string;
  organizationType: OrganizationType;
  website: string | null;
  linkedin: string | null;
  crunchbase: string | null;
  stockSymbol: string | null;
  mark: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  productCategories: Array<{
    _id: string;
    name: string;
    slug: string;
    expansion: string | null;
    description: string;
    marketSegment: {
      _id: string;
      name: string;
      slug: string;
      description: null;
      icon: string | null;
    };
  }> | null;
  supportedCloudProviders: Array<{
    _id: string;
    name: string;
    slug: string;
    description: string;
    icon: string | null;
    mark: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    website: string;
    linkedin: string | null;
  }> | null;
}>;

// Source: ./src/lib/sanity/queries/page.ts
// Variable: PAGE_QUERY
// Query: *[    _type == "page" &&    slug.current == $slug  ] [0] {    title,    description,  }
export type PAGE_QUERYResult = {
  title: string;
  description: string;
} | null;

// Source: ./src/lib/sanity/queries/productCategories.ts
// Variable: PRODUCT_CATEGORY_SLUGS_QUERY
// Query: *[    _type == "productCategory" &&    defined(slug.current)  ].slug.current
export type PRODUCT_CATEGORY_SLUGS_QUERYResult = Array<string>;
// Variable: PRODUCT_CATEGORIES_QUERY
// Query: *[    _type == "productCategory" &&    ($marketSegment == "" || $marketSegment == marketSegment._ref)  ] | order(lower(name) asc) {      _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, },  }
export type PRODUCT_CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  expansion: string | null;
  description: string;
  marketSegment: {
    _id: string;
    name: string;
    slug: string;
    description: null;
    icon: string | null;
  };
}>;
// Variable: PRODUCT_CATEGORY_QUERY
// Query: *[    _type == "productCategory" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, },    "vendors": *[      _type == "organization" && ^._id in productCategories[]._ref    ] | order(lower(name) asc) {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },    }  }
export type PRODUCT_CATEGORY_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  expansion: string | null;
  description: string;
  marketSegment: {
    _id: string;
    name: string;
    slug: string;
    description: null;
    icon: string | null;
  };
  vendors: Array<{
    _id: string;
    name: string;
    slug: string;
    description: string;
    organizationType: OrganizationType;
    website: string | null;
    linkedin: string | null;
    crunchbase: string | null;
    stockSymbol: string | null;
    mark: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    productCategories: Array<{
      _id: string;
      name: string;
      slug: string;
      expansion: string | null;
      description: string;
      marketSegment: {
        _id: string;
        name: string;
        slug: string;
        description: null;
        icon: string | null;
      };
    }> | null;
    supportedCloudProviders: Array<{
      _id: string;
      name: string;
      slug: string;
      description: string;
      icon: string | null;
      mark: {
        asset: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      logo: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      website: string;
      linkedin: string | null;
    }> | null;
  }>;
} | null;

// Source: ./src/lib/sanity/queries/research.ts
// Variable: RESEARCHES_QUERY
// Query: *[    _type == "research"  ] | order(lower(name) asc) {      _id,  name,  "slug": slug.current,  description,  website,    organization -> {   ...select(    organizationType == "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,      parentOrganization -> {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,      },    },    organizationType != "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  "research": *[    _type == "research" && organization._ref == ^._id  ] {      _id,  name,  "slug": slug.current,  description,  website,  },  "acquiredEntities": *[    _type == "organization" && parentOrganization._ref == ^._id  ] {        _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,  },    },  ), },  }
export type RESEARCHES_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  description: string | null;
  website: string;
  organization:
    | {
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        productCategories: Array<{
          _id: string;
          name: string;
          slug: string;
          expansion: string | null;
          description: string;
          marketSegment: {
            _id: string;
            name: string;
            slug: string;
            description: null;
            icon: string | null;
          };
        }> | null;
        supportedCloudProviders: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string;
          icon: string | null;
          mark: {
            asset: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          };
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          website: string;
          linkedin: string | null;
        }> | null;
        research: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string | null;
          website: string;
        }>;
        acquiredEntities: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string;
          organizationType: OrganizationType;
          website: string | null;
          linkedin: string | null;
          crunchbase: string | null;
          stockSymbol: string | null;
          mark: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          acquisitionDate: string | null;
          acquisitionPrice: number | null;
          pressRelease: string | null;
        }>;
      }
    | {
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
        parentOrganization: {
          _id: string;
          name: string;
          slug: string;
          description: string;
          organizationType: OrganizationType;
          website: string | null;
          linkedin: string | null;
          crunchbase: string | null;
          stockSymbol: string | null;
          mark: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
        } | null;
      }
    | null;
}>;
// Variable: RESEARCH_QUERY
// Query: *[    _type == "research" &&    slug.current == $slug  ] [0] {      _id,  name,  "slug": slug.current,  description,  website,    organization -> {   ...select(    organizationType == "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,      parentOrganization -> {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,      },    },    organizationType != "acquired" => {          _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  productCategories[] -> {   _id,  name,  "slug": slug.current,  expansion,  description,  marketSegment -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name, }, },  supportedCloudProviders[] -> {   _id,  name,  "slug": slug.current,  description,  "icon": icon.name,  mark,  logo,  website,  linkedin, },  "research": *[    _type == "research" && organization._ref == ^._id  ] {      _id,  name,  "slug": slug.current,  description,  website,  },  "acquiredEntities": *[    _type == "organization" && parentOrganization._ref == ^._id  ] {        _id,  name,  "slug": slug.current,  description,  organizationType,  website,  linkedin,  crunchbase,  stockSymbol,  mark,  logo,  acquisitionDate,  acquisitionPrice,  pressRelease,  },    },  ), },  }
export type RESEARCH_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  description: string | null;
  website: string;
  organization:
    | {
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        productCategories: Array<{
          _id: string;
          name: string;
          slug: string;
          expansion: string | null;
          description: string;
          marketSegment: {
            _id: string;
            name: string;
            slug: string;
            description: null;
            icon: string | null;
          };
        }> | null;
        supportedCloudProviders: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string;
          icon: string | null;
          mark: {
            asset: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          };
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          website: string;
          linkedin: string | null;
        }> | null;
        research: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string | null;
          website: string;
        }>;
        acquiredEntities: Array<{
          _id: string;
          name: string;
          slug: string;
          description: string;
          organizationType: OrganizationType;
          website: string | null;
          linkedin: string | null;
          crunchbase: string | null;
          stockSymbol: string | null;
          mark: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          acquisitionDate: string | null;
          acquisitionPrice: number | null;
          pressRelease: string | null;
        }>;
      }
    | {
        _id: string;
        name: string;
        slug: string;
        description: string;
        organizationType: OrganizationType;
        website: string | null;
        linkedin: string | null;
        crunchbase: string | null;
        stockSymbol: string | null;
        mark: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        logo: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        } | null;
        acquisitionDate: string | null;
        acquisitionPrice: number | null;
        pressRelease: string | null;
        parentOrganization: {
          _id: string;
          name: string;
          slug: string;
          description: string;
          organizationType: OrganizationType;
          website: string | null;
          linkedin: string | null;
          crunchbase: string | null;
          stockSymbol: string | null;
          mark: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          logo: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
        } | null;
      }
    | null;
} | null;

// Source: ./src/lib/sanity/queries/siteSettings.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[    _type == "siteSettings" &&    _id == "siteSettings"  ] [0] {    title,    description,    url,    copyright,    navigation[] {      name,      href,    },  }
export type SITE_SETTINGS_QUERYResult = {
  title: string;
  description: string;
  url: string;
  copyright: string;
  navigation: Array<{
    name: string;
    href: string;
  }>;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[\n    _type == "cloudProvider" &&\n    defined(slug.current)\n  ].slug.current\n': CLOUD_PROVIDER_SLUGS_QUERYResult;
    '\n  *[\n    _type == "cloudProvider" &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n\n  }\n': CLOUD_PROVIDERS_QUERYResult;
    '\n  *[\n    _type == "cloudProvider" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n\n    "vendors": *[\n      _type == "organization" && ^._id in supportedCloudProviders[]._ref\n    ] | order(lower(name) asc) {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n    }\n  }\n': CLOUD_PROVIDER_QUERYResult;
    '\n  *[\n    _type == "marketSegment"\n  ] | order(lower(name) asc) {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n\n  "productCategories": *[\n    _type == "productCategory" &&\n    marketSegment._ref == ^._id &&\n    count(*[_type == "organization" && ^._id in productCategories[]._ref]) > 0\n  ] | order(lower(name) asc) {\n    _id,\n    name,\n    "slug": slug.current,\n    expansion,\n  },\n\n  }\n': MARKET_SEGMENTS_QUERYResult;
    '\n  *[\n    _type == "marketSegment" &&\n    slug.current == $slug\n  ] [0] {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n\n  "productCategories": *[\n    _type == "productCategory" &&\n    marketSegment._ref == ^._id &&\n    count(*[_type == "organization" && ^._id in productCategories[]._ref]) > 0\n  ] | order(lower(name) asc) {\n    _id,\n    name,\n    "slug": slug.current,\n    expansion,\n  },\n\n  }\n': MARKET_SEGMENT_QUERYResult;
    '\n  count(\n    *[\n      _type == "organization" &&\n      organizationType != "acquired" &&\n      (count($organizationTypes) == 0 || organizationType in $organizationTypes)\n    ]\n  )\n': ORGANIZATIONS_COUNT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    defined(slug.current) &&\n    organizationType != "acquired"\n  ].slug.current\n': ORGANIZATION_SLUGS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType != "acquired" &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) [0...20] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  }\n': ORGANIZATIONS_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    slug.current == $slug\n  ] [0] {\n    \n  ...select(\n    organizationType == "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n      parentOrganization -> {\n        \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n      },\n    },\n    organizationType != "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n  "research": *[\n    _type == "research" && organization._ref == ^._id\n  ] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  website,\n\n  },\n  "acquiredEntities": *[\n    _type == "organization" && parentOrganization._ref == ^._id\n  ] {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n  },\n\n    },\n  ),\n\n  }\n': ORGANIZATION_QUERYResult;
    '\n  count(\n    *[\n      _type == "organization" &&\n      organizationType != "acquired" &&\n      count(productCategories) > 0 &&\n      (count($productCategories) == 0 || references($productCategories)) &&\n      (count($organizationTypes) == 0 || organizationType in $organizationTypes)\n    ]\n  )\n': VENDORS_COUNT_QUERYResult;
    '\n  *[\n    _type == "organization" &&\n    organizationType != "acquired" &&\n    count(productCategories) > 0 &&\n    (count($productCategories) == 0 || references($productCategories)) &&\n    (count($organizationTypes) == 0 || organizationType in $organizationTypes) &&\n    lower(name) > lower($prev)\n  ] | order(lower(name) asc) [0...20] {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n  }\n': VENDORS_QUERYResult;
    '\n  *[\n    _type == "page" &&\n    slug.current == $slug\n  ] [0] {\n    title,\n    description,\n  }\n': PAGE_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    defined(slug.current)\n  ].slug.current\n': PRODUCT_CATEGORY_SLUGS_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    ($marketSegment == "" || $marketSegment == marketSegment._ref)\n  ] | order(lower(name) asc) {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n\n  }\n': PRODUCT_CATEGORIES_QUERYResult;
    '\n  *[\n    _type == "productCategory" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n\n    "vendors": *[\n      _type == "organization" && ^._id in productCategories[]._ref\n    ] | order(lower(name) asc) {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n\n    }\n  }\n': PRODUCT_CATEGORY_QUERYResult;
    '\n  *[\n    _type == "research"\n  ] | order(lower(name) asc) {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  website,\n\n    organization -> { \n  ...select(\n    organizationType == "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n      parentOrganization -> {\n        \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n      },\n    },\n    organizationType != "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n  "research": *[\n    _type == "research" && organization._ref == ^._id\n  ] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  website,\n\n  },\n  "acquiredEntities": *[\n    _type == "organization" && parentOrganization._ref == ^._id\n  ] {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n  },\n\n    },\n  ),\n },\n  }\n': RESEARCHES_QUERYResult;
    '\n  *[\n    _type == "research" &&\n    slug.current == $slug\n  ] [0] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  website,\n\n    organization -> { \n  ...select(\n    organizationType == "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n      parentOrganization -> {\n        \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n      },\n    },\n    organizationType != "acquired" => {\n      \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  productCategories[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  expansion,\n  description,\n  marketSegment -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n },\n },\n  supportedCloudProviders[] -> { \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  "icon": icon.name,\n  mark,\n  logo,\n  website,\n  linkedin,\n },\n  "research": *[\n    _type == "research" && organization._ref == ^._id\n  ] {\n    \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  website,\n\n  },\n  "acquiredEntities": *[\n    _type == "organization" && parentOrganization._ref == ^._id\n  ] {\n    \n  \n  _id,\n  name,\n  "slug": slug.current,\n  description,\n  organizationType,\n  website,\n  linkedin,\n  crunchbase,\n  stockSymbol,\n  mark,\n  logo,\n\n  acquisitionDate,\n  acquisitionPrice,\n  pressRelease,\n\n  },\n\n    },\n  ),\n },\n  }\n': RESEARCH_QUERYResult;
    '\n  *[\n    _type == "siteSettings" &&\n    _id == "siteSettings"\n  ] [0] {\n    title,\n    description,\n    url,\n    copyright,\n    navigation[] {\n      name,\n      href,\n    },\n  }\n': SITE_SETTINGS_QUERYResult;
  }
}
